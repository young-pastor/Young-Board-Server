
package ${packageName}.${modularName}.${busName}.controller;

import com.zhisida.board.core.annotion.BusinessLog;
import com.zhisida.board.core.annotion.Permission;
import com.zhisida.board.core.enums.LogAnnotionOpTypeEnum;
import com.zhisida.board.core.pojo.response.ResponseData;
import com.zhisida.board.core.pojo.response.SuccessResponseData;
import ${packageName}.${modularName}.${busName}.param.${ClassName}Param;
import ${packageName}.${modularName}.${busName}.service.${ClassName}Service;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import javax.annotation.Resource;
import java.util.List;

/**
 * ${functionName}控制器
 *
 * @author ${authorName}
 * @date ${createDateString}
 */
@RestController
public class ${ClassName}Controller {

    @Resource
    private ${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @GetMapping("/${className}/page")
    @BusinessLog(title = "${functionName}_查询", opType = LogAnnotionOpTypeEnum.QUERY)
    public ResponseData page(${ClassName}Param ${className}Param) {
        return new SuccessResponseData(${className}Service.page(${className}Param));
    }

    /**
     * 添加${functionName}
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @PostMapping("/${className}/add")
    @BusinessLog(title = "${functionName}_增加", opType = LogAnnotionOpTypeEnum.ADD)
    public ResponseData add(@RequestBody @Validated(${ClassName}Param.add.class) ${ClassName}Param ${className}Param) {
            ${className}Service.add(${className}Param);
        return new SuccessResponseData();
    }

    /**
     * 删除${functionName}，可批量删除
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @PostMapping("/${className}/delete")
    @BusinessLog(title = "${functionName}_删除", opType = LogAnnotionOpTypeEnum.DELETE)
    public ResponseData delete(@RequestBody @Validated(${ClassName}Param.delete.class) List<${ClassName}Param> ${className}ParamList) {
            ${className}Service.delete(${className}ParamList);
        return new SuccessResponseData();
    }

    /**
     * 编辑${functionName}
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @PostMapping("/${className}/edit")
    @BusinessLog(title = "${functionName}_编辑", opType = LogAnnotionOpTypeEnum.EDIT)
    public ResponseData edit(@RequestBody @Validated(${ClassName}Param.edit.class) ${ClassName}Param ${className}Param) {
            ${className}Service.edit(${className}Param);
        return new SuccessResponseData();
    }

    /**
     * 查看${functionName}
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @GetMapping("/${className}/detail")
    @BusinessLog(title = "${functionName}_查看", opType = LogAnnotionOpTypeEnum.DETAIL)
    public ResponseData detail(@Validated(${ClassName}Param.detail.class) ${ClassName}Param ${className}Param) {
        return new SuccessResponseData(${className}Service.detail(${className}Param));
    }

    /**
     * ${functionName}列表
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @GetMapping("/${className}/list")
    @BusinessLog(title = "${functionName}_列表", opType = LogAnnotionOpTypeEnum.QUERY)
    public ResponseData list(${ClassName}Param ${className}Param) {
        return new SuccessResponseData(${className}Service.list(${className}Param));
    }

    /**
     * 导出系统用户
     *
     * @author ${authorName}
     * @date ${createDateString}
     */
    @Permission
    @GetMapping("/${className}/export")
    @BusinessLog(title = "${functionName}_导出", opType = LogAnnotionOpTypeEnum.EXPORT)
    public void export(${ClassName}Param ${className}Param) {
        ${className}Service.export(${className}Param);
    }

}
